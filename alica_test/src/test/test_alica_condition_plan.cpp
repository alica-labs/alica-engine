#include <gtest/gtest.h>
#include <engine/AlicaEngine.h>
#include <engine/IAlicaClock.h>
#include "engine/IAlicaCommunication.h"
#include "engine/model/State.h"
#include "TestBehaviourCreator.h"
#include "engine/model/Behaviour.h"
#include "engine/PlanRepository.h"
#include "engine/BasicBehaviour.h"
#include "engine/IBehaviourPool.h"
#include "engine/PlanBase.h"
#include <clock/AlicaROSClock.h>
#include <communication/AlicaRosCommunication.h>
#include  "engine/DefaultUtilityFunction.h"
#include  "engine/ITeamObserver.h"
#include "engine/model/Plan.h"
#include "engine/model/RuntimeCondition.h"
#include "TestConditionCreator.h"
#include "TestConstraintCreator.h"
#include "TestUtilityFunctionCreator.h"
#include "Attack.h"
#include "MidFieldStandard.h"
#include "engine/Assignment.h"
#include "engine/collections/AssignmentCollection.h"
#include "engine/collections/StateCollection.h"
#include "ConstraintTestPlan1414068524245.h"
#include "ConstraintUsingBehaviour.h"
#include "ConstraintTestPlan1414068524245Constraint.h"
#include <thread>
#include <iostream>
#include "ConstraintTestPlanDummySolver.h"
#include "SolverType.h"
#include <engine/constraintmodul/ConstraintQuery.h>

using namespace alicaAutogenerated;

class AlicaConditionPlan : public ::testing::Test
{
protected:
	supplementary::SystemConfig* sc;
	alica::AlicaEngine* ae;
	alicaTests::TestBehaviourCreator* bc;
	alicaTests::TestConditionCreator* cc;
	alicaTests::TestUtilityFunctionCreator* uc;
	alicaTests::TestConstraintCreator* crc;

	virtual void SetUp()
	{
		// determine the path to the test config
		string path = supplementary::FileSystem::getSelfPath();
		int place = path.rfind("devel");
		path = path.substr(0, place);
		path = path + "src/alica/alica_test/src/test";

		// bring up the SystemConfig with the corresponding path
		sc = supplementary::SystemConfig::getInstance();
		sc->setRootPath(path);
		sc->setConfigPath(path + "/etc");
		sc->setHostname("nase");

		// setup the engine
		ae = new alica::AlicaEngine();
		bc = new alicaTests::TestBehaviourCreator();
		cc = new alicaTests::TestConditionCreator();
		uc = new alicaTests::TestUtilityFunctionCreator();
		crc = new alicaTests::TestConstraintCreator();
		ae->setIAlicaClock(new alicaRosProxy::AlicaROSClock());
		ae->setCommunicator(new alicaRosProxy::AlicaRosCommunication(ae));
		ae->addSolver(SolverType::DUMMYSOLVER, new alica::reasoner::ConstraintTestPlanDummySolver(ae));
	}

	virtual void TearDown()
	{

		ae->shutdown();
		sc->shutdown();
		delete ae->getIAlicaClock();
		delete ae->getCommunicator();
		delete ae->getSolver(SolverType::DUMMYSOLVER);
		delete cc;
		delete bc;
		delete uc;
		delete crc;
	}
};
/**
 * Tests if Behaviour with Constraints are called
 */
TEST_F(AlicaConditionPlan, solverTest)
{
	ae->init(bc, cc, uc, crc, "Roleset", "ConstraintTestPlan", ".", false);
	ae->start();

//	unsigned int sleepTime = 1;
	chrono::milliseconds sleepTime(33);
	this_thread::sleep_for(sleepTime);

//	shared_ptr<BasicBehaviour> basicBehaviour =
//			(*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getBasicBehaviour();
//	shared_ptr<alicaTests::ConstraintUsingBehaviour> constraintUsingBehaviour = dynamic_pointer_cast<
//			alicaTests::ConstraintUsingBehaviour>(basicBehaviour);
//	EXPECT_GT(constraintUsingBehaviour->getCallCounter(), 0);

	EXPECT_GT(Constraint1414068566297::getCallCounter(), 0);

	EXPECT_GT(alica::reasoner::ConstraintTestPlanDummySolver::getGetSolutionCallCounter(), 0);
}

