#include "Plans/VariableHandling/constraints/Lvl31524452836022Constraints.h"
using namespace std;
using namespace alica;
/*PROTECTED REGION ID(ch1524452836022) ENABLED START*/

#include <AutoDiff.h>
#include <assert.h>
#include <engine/constraintmodul/ProblemDescriptor.h>

/*PROTECTED REGION END*/

namespace alicaAutogenerated
{
// Plan:Lvl3

/*
 * Tasks:
 * - EP:1524452836024 : DefaultTask (1225112227903)
 *
 * States:
 * - NewState (1524452836023)
 *
 * Vars:
 * - L3A (1524453054226)
 * - L3B (1524453060294)
 */

/*
 * RuntimeCondition - (Name): NewRuntimeCondition
 * (ConditionString):
 * Static Variables: [L3A, L3B]
 * Domain Variables:

 * forall agents in Lvl3 let v = [X, Y]

 */
void Constraint1524452937477::getConstraint(shared_ptr<ProblemDescriptor> c, shared_ptr<RunningPlan> rp)
{
    /*PROTECTED REGION ID(cc1524452937477) ENABLED START*/
    assert(c->getStaticVars().size() == 2);
    assert(c->getStaticRanges().size() == 2);
    assert(c->getDomainVars().size() == 1);
    assert(c->getDomainVars()[0].getVars().size() == 2);
    std::shared_ptr<autodiff::Term> l1a = std::static_pointer_cast<autodiff::Variable>(c->getStaticVars()[0]);
    std::shared_ptr<autodiff::Term> l1b = std::static_pointer_cast<autodiff::Variable>(c->getStaticVars()[1]);

    std::shared_ptr<autodiff::Term> x = std::static_pointer_cast<autodiff::Variable>(c->getDomainVars()[0].getVars()[0].var);
    std::shared_ptr<autodiff::Term> y = std::static_pointer_cast<autodiff::Variable>(c->getDomainVars()[0].getVars()[1].var);

    c->editDomainVars()[0].editVars()[0].min = -5.0;
    c->editDomainVars()[0].editVars()[1].min = -5.0;
    c->editDomainVars()[0].editVars()[0].max = 5.0;
    c->editDomainVars()[0].editVars()[1].max = 5.0;

    shared_ptr<autodiff::Term> constraint = x * l1a < TermBuilder::constant(0.0);
    constraint &= y * l1b > TermBuilder::constant(0.0);

    c->setConstraint(constraint);
    std::shared_ptr<autodiff::Term> utility = l1a * l1a + l1b * l1b;

    c->setUtility(utility);
    c->setUtilitySufficiencyThreshold(10.0);

    /*PROTECTED REGION END*/
}

// State: NewState

// State: NewState
}
