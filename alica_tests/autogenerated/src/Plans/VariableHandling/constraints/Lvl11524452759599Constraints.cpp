#include "Plans/VariableHandling/constraints/Lvl11524452759599Constraints.h"
using namespace std;
using namespace alica;
/*PROTECTED REGION ID(ch1524452759599) ENABLED START*/
// Add additional using directives here
#include <AutoDiff.h>
#include <assert.h>
#include <engine/constraintmodul/ProblemDescriptor.h>
/*PROTECTED REGION END*/

namespace alicaAutogenerated
{
// Plan:Lvl1

/*
 * Tasks:
 * - EP:1524452759601 : DefaultTask (1225112227903)
 *
 * States:
 * - NewState (1524452759600)
 * - NewState (1524453481856)
 *
 * Vars:
 * - L1A (1524453326397)
 * - L1B (1524453331530)
 * - L1C (1524453336548)
 */

/*
 * RuntimeCondition - (Name): NewRuntimeCondition
 * (ConditionString):
 * Static Variables: [L1A, L1B]
 * Domain Variables:

 */
void Constraint1524453470580::getConstraint(shared_ptr<ProblemDescriptor> c, shared_ptr<RunningPlan> rp)
{
    /*PROTECTED REGION ID(cc1524453470580) ENABLED START*/
    std::shared_ptr<autodiff::Term> l1a = std::static_pointer_cast<autodiff::Variable>(c->getStaticVars()[0]);
    std::shared_ptr<autodiff::Term> l1b = std::static_pointer_cast<autodiff::Variable>(c->getStaticVars()[1]);
    assert(c->getStaticVars().size() == 2);
    assert(c->getStaticRanges().size() == 2);
    assert(c->getDomainVars().empty());
    c->editStaticRanges()[0].first = -200.0;
    c->editStaticRanges()[0].second = -100.0;

    c->editStaticRanges()[1].first = 100.0;
    c->editStaticRanges()[1].second = 200.0;

    std::shared_ptr<autodiff::Term> constraint = l1a + l1b < TermBuilder::constant(10.0);
    constraint &= l1a + l1b > TermBuilder::constant(-10.0);

    c->setConstraint(constraint);

    std::shared_ptr<autodiff::Term> utility = std::make_shared<autodiff::Constant>(1);
    c->setUtility(utility);
    c->setUtilitySufficiencyThreshold(10.0);

    /*PROTECTED REGION END*/
}

// State: NewState

// State: NewState

// State: NewState

// State: NewState

/*
 * Transition:
 * - Name: MISSING_NAME
 * - ConditionString:
 *
 * Plans in State:
 * Static Variables: []
 * Domain Variables:

 * forall agents in MISSING_NAME let v = [X, Y]

 */
void Constraint1524453491764::getConstraint(shared_ptr<ProblemDescriptor> c, shared_ptr<RunningPlan> rp)
{
    /*PROTECTED REGION ID(cc1524453491764) ENABLED START*/
    assert(c->getStaticVars().empty());
    assert(c->getStaticRanges().empty());
    assert(c->getDomainVars().size() == 2);

    std::shared_ptr<autodiff::Term> x1 = std::static_pointer_cast<autodiff::Variable>(c->getDomainVars()[0].getVars()[0].var);
    std::shared_ptr<autodiff::Term> y1 = std::static_pointer_cast<autodiff::Variable>(c->getDomainVars()[0].getVars()[1].var);

    std::shared_ptr<autodiff::Term> x2 = std::static_pointer_cast<autodiff::Variable>(c->getDomainVars()[1].getVars()[0].var);
    std::shared_ptr<autodiff::Term> y2 = std::static_pointer_cast<autodiff::Variable>(c->getDomainVars()[1].getVars()[1].var);

    shared_ptr<autodiff::Term> constraint = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) > TermBuilder::constant(10000.0);
    constraint &= x1 > y1;
    constraint &= x2 > y2;

    c->setConstraint(constraint);
    std::shared_ptr<autodiff::Term> utility = TermBuilder::constant(1.0);

    c->setUtility(utility);
    /*PROTECTED REGION END*/
}
}
